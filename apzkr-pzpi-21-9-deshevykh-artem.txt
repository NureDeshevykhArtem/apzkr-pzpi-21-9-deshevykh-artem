Міністерство освіти і науки України
Харківський національний університет радіоелектроніки Факультет комп’ютерних наук
Кафедра програмної інженерії


КУРСОВА РОБОТА ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного                     забезпечення»
Тема роботи: Програмна система для пошуку партнера для в'язки



Студент гр. ПЗПІ-21-9	 	Дешевих А.М.
(підпис)
Керівник роботи	 	ст.викл. Сокорчук І.П.
(підпис)

 



Комісія:
 
Роботу захищено «	»	2024 р. з оцінкою  			

 	доц. Лещинський В.О.
(підпис)
 	доц. Лещинська І.О.
(підпис)
 	ст. викл. Сокорчук І.П.
(підпис)





Харків 2024 р.
 
Харківський національний університет радіоелектроніки


Факультет комп’ютерних наук		Кафедра програмної інженерії	    Спеціальність  121 - Інженерія програмного забезпечення		 Курс	3	Семестр	6	 Навчальна дисципліна Архітектура програмного забезпечення                              


ЗАВДАННЯ
НА КУРСОВУ РОБОТУ СТУДЕНТОВІ


 	Дешевих Артем Миколайович	
1.	Тема роботи: Програмна система для пошуку партнера для в'язки	
 	_
2.	Термін узгодження завдання курсової роботи «	»	2024 р.
3.	Термін здачі студентом закінченої роботи «	»	2024 р.
4.	Вихідні дані до проекту (роботи): В програмній системі передбачити:	_
розробку серверної частини та функціоналу додавання, редагування,                 видалення тварин до свого кабінету, розробку клієнтської частини,                   мобільного застосунку та IoT пристрою.	_
 		 _ Використовувати ОС Windows 11, середовище розробки PyCharm                     
5.	Зміст пояснювальної записки (перелік питань, що належить розробити) Vision & Scope, back-end, програмне забезпечення для IoT пристрою, front-end, мобільний програмний застосунок	_
6.	Перелік графічного матеріалу (з точним зазначенням обов’язкових креслень) Vision & Scope, Deployment Diagram, Use Case Diagram, Entity–Relationship Model, State Diagram, Interaction Overview Diagram, Activity Diagram, Package Diagram, Component Diagram, Entity–Relationship Model	_
 
КАЛЕНДАРНИЙ ПЛАН





№	Назва етапів курсової роботи	Термін виконання етапів роботи	Примітка
1	Функціональна специфікація програмного проекту	10.05.2024	Виконано
2	Проектування програмного проекту	20.05.2024	Виконано
3	Кодування програмного проекту	02.06.2024	Виконано
4	Оформлення пояснювальної записки	16.06.2024	Виконано
5	Захист курсової роботи	30.06.2024	Виконано


Дата видачі завдання «	»	2024 р.


Керівник	 	ст.викл. Сокорчук І.П.
(підпис)


Завдання прийняв до виконання

ст.гр. ПЗПІ-21-9	Дешевих А.М.
(підпис)
 
РЕФЕРАТ



Пояснювальна записка до курсової роботи: 32 с., 10 рис., 1 табл., 1 додаток,
6 джерел.
ПОШУК ПАРТНЕРІВ ДЛЯ В'ЯЗКИ, АВТОМАТИЗАЦІЯ, DJANGO, PYTHON, SQLITE, ГЕНЕТИЧНИЙ АНАЛІЗ, МОБІЛЬНИЙ ДОДАТОК.
Об'єктом дослідження є автоматизація процесу пошуку партнерів для в'язки домашніх тварин, на прикладі системи, що оптимізує цей процес завдяки використанню веб-додатку та мобільного застосунку.
Метою роботи є розробка системи, що вміє ефективно підбирати партнерів для в'язки тварин з урахуванням генетичної сумісності, породи, віку та інших важливих характеристик: серверна частина, веб-частина, мобільний застосунок, інтеграція з ветеринарними базами даних.
Методи розробки базуються на технології Django, сервер бази даних SQLite.
У результаті роботи здійснено програмну реалізацію системи для автоматизації пошуку партнерів для в'язки, яка включає функції реєстрації користувачів, створення профілів тварин, пошуку сумісних партнерів, генетичного аналізу та комунікації між власниками тварин.
 
ЗМІСТ

Вступ	6
1	Аналіз предметної галузі	7
2	Постановка задачі	9
2.1	Основний функціонал системи	9
2.2	Допущення та залежності	10
2.3	Користувацькі обмеження	11
2.4	Бізнес-потреби та пріоритетність	11
2.5	Середа оточення	12
3	Архітектура проекту	14
4	Кодування	17
4.1	Back-end сервер	17
4.2	База даних	18
4.3	Front-end сервер	20
4.4	Мобільний клієнт	22
4.5	Розумний пристрій	24
Висновки	25
Перелік джерел посилання	26
Додаток А Приграмний код	27
Додаток Б Специфікація ПЗ	30 

ВСТУП

У сучасному світі догляд за домашніми тваринами стає все більш популярним, а відповідальне розведення та знаходження ідеальних партнерів для в’язки є ключовими аспектами для забезпечення здоров’я та благополуччя тварин. В цьому контексті, програмна система пошуку партнера для в’язки виступає як необхідна передумова для створення оптимальних пар, що сприяє покращенню порід та здоров’я наступних поколінь.
Перш за все, власники тварин стикаються з викликом знаходження підходящих партнерів, які б відповідали певним критеріям, таким як порода, вік, здоров’я та характер. Система пошуку повинна здійснювати постійне відстеження та аналіз потенційних кандидатів, щоб забезпечити, що кожна тварина знайде найбільш підходящого партнера для в’язки.
Задачі роботи:
a)	розробка інтерфейсу;
б) Створення логіки для оновлення даних програми;
в) Проектування бази даних для зберігання та взаємодії з даними при роботі з програмою;
г) Вивчення технологій та бібліотек для розширення можливостей програми.
В якості основного інструмента розробки було використано середовище розробки PyCharm. Основна мова програмування – Python. Також використовувалася мова SQL для роботи з даними 

1 АНАЛІЗ ПРЕДМЕТНОЇ ГАЛУЗІ

У світі догляду за домашніми тваринами питання розведення завжди було актуальним. Власники породистих тварин постійно стикаються з викликом знаходження ідеального партнера для свого улюбленця. Цей процес вимагає врахування багатьох факторів: генетичної сумісності, здоров'я, характеру та зовнішніх ознак потенційних партнерів.
Традиційні методи пошуку, такі як оголошення в спеціалізованих виданнях або рекомендації від знайомих заводчиків, часто виявляються неефективними та часозатратними (рис. 1.1). Вони не гарантують оптимального підбору пар і можуть призвести до неочікуваних результатів у потомстві.
Рисунок 1.1 – оголошення про в’язку
Розвиток технологій відкриває нові можливості для вирішення цієї проблеми. Запропонована в даному проекті програмна система націлена на революціонізацію процесу пошуку партнерів для в'язки. Вона являє собою комплексне рішення, що складається з веб-платформи та мобільного додатку, підключених до потужної бази даних. 
Використання такої системи не тільки значно спрощує процес пошуку, але й підвищує ймовірність отримання здорового потомства з бажаними характеристиками. Це особливо важливо для збереження чистоти породи та покращення генофонду домашніх тварин.
Таким чином, розроблювана програмна система має потенціал стати незамінним інструментом для власників та заводчиків, сприяючи відповідальному розведенню та підвищенню стандартів догляду за домашніми тваринами. 

2 ПОСТАНОВКА ЗАДАЧІ

Головною метою даного курсового проекту є створення інноваційного рішення для оптимізації процесу пошуку партнерів для в'язки домашніх тварин. Це передбачає розробку комплексної системи, яка автоматизує та вдосконалює традиційні методи підбору пар, забезпечуючи більш ефективний та науково обґрунтований підхід до розведення.
Для досягнення поставленої мети необхідно розробити потужну серверну платформу, яка стане основою всієї системи. Ця платформа повинна включати надійну базу даних для зберігання детальної інформації про тварин, включаючи генетичні дані, медичну історію та характеристики породи. Важливим аспектом серверної частини є реалізація алгоритмів машинного навчання для аналізу генетичної сумісності та прогнозування потенційних результатів в'язки. Система також повинна бути здатною до масштабування для обробки зростаючої кількості користувачів та даних.
Паралельно з розробкою серверної частини необхідно створити зручні та інтуїтивно зрозумілі клієнтські додатки. Це включає в себе веб-інтерфейс для користувачів персональних комп'ютерів та мобільний додаток для зручного доступу з смартфонів та планшетів. Ці додатки повинні надавати користувачам можливість легко створювати та редагувати профілі своїх тварин, переглядати потенційних партнерів та спілкуватися з іншими власниками.
Важливим аспектом проекту є інтеграція з зовнішніми системами, зокрема з ветеринарними базами даних для верифікації медичної інформації. Це дозволить забезпечити достовірність даних та підвищити довіру користувачів до системи. Крім того, необхідно розробити API для можливого майбутнього розширення функціоналу та інтеграції з іншими платформами.
Особливу увагу в проекті слід приділити питанням безпеки та конфіденційності. Це включає впровадження надійних механізмів аутентифікації та авторизації користувачів, а також розробку системи шифрування даних для захисту чутливої інформації про тварин та їх власників. Ці заходи є критично важливими для забезпечення довіри користувачів та відповідності законодавчим вимогам щодо захисту персональних даних.
Реалізація цього проекту дозволить створити унікальну екосистему для відповідального розведення домашніх тварин. Така система не тільки значно спростить процес пошуку партнерів для в'язки, але й сприятиме покращенню здоров'я та генетичного різноманіття породистих тварин. Це, в свою чергу, може мати позитивний вплив на розвиток галузі в цілому, підвищуючи стандарти догляду за тваринами та сприяючи більш етичному підходу до розведення.

2.1	Основний функціонал системи

Основний функціонал повинен включати в себе:
а) автоматичний підбір потенційних партнерів на основі генетичної сумісності та інших параметрів без необхідності ручного пошуку користувачем;
б) створення рейтингу найбільш популярних тварин для в'язки; 
          в) можливість додавання нових профілів тварин та налаштування параметрів пошуку;
     г) інтеграція з базами даних ветеринарних клінік для отримання актуальної інформації про здоров'я тварин; 
д) реєстрація та авторизація користувачів з різними рівнями доступу;
е) синхронізація даних профілю тварини між пристроями користувача та центральним сервером;
є) панель адміністрування для керування користувачами, профілями тварин та системними налаштуваннями.
Нижче	наведено	більш	детальний	опис	функціоналу	системи	з розбивкою по частині системи де його буде реалізовано:
а) серверна частина матиме наступний функціонал:
1)	реєстрацію та управління профілями власників тварин;
2)	створення та ведення бази даних тварин для в'язки;
3)	алгоритми підбору оптимальних пар;
4)	захист конфіденційної інформації користувачів та їхніх тварин.
б) web клієнт матиме наступний функціонал:
1)	візуалізація даних про потенційних партнерів для в'язки;
2)	реєстрація нових користувачів та автентифікація існуючих;
3)	адміністративна панель для модерації та управління системою;
4)	забезпечення безпеки даних користувачів.
в) Android клієнт матиме наступний функціонал:
1)	швидкий доступ до особистого кабінету користувача;
2)	додавання нового профілю тварини або редагування існуючого;
3)	система рейтингу та відгуків про результати попередніх в'язок;
5) комунікація з власниками потенційних партнерів через чат;
4)	захист персональних даних (з використанням JWT токенів).
г) IoT пристрій матиме наступний функціонал:
1) надання інформації про місцезнаходження тварини.

2.2	Допущення та залежності

Для коректної роботи усіх частин проекту наведений список допущень: а) користувач прочитав посібник користувача і знає, як користуватися
системою;
б) користувач має базові навички роботи з комп'ютером; в) користувач знає, як приєднатись до сесії;
г) для синхронізації налаштувань користувача необхідно підключення до мережі Інтернет.
Також існують наступні залежності:
а) додаток буде орієнтуватися на версії Android 4.4 і вище;
б) телефон має надійне підключення до локальної WiFi мережі.

2.3	Користувацькі обмеження:

Для	коректного	використання	даного	продукту	та	уникнення нерозуміння з боку користувачів, є деякі користувацькі обмеження:
а) користувач повинен пам’ятати логін та пароль для входу у систему;

2.4	Бізнес-потреби та пріоритетність

Даний продукт може залучити користувачів своєю унікальністю та актуальною функціональністю (таблиця 2.1) 
Таблиця 2.1 – Особи та їх інтереси
Зацікавлена особа	Обмеження	Інтереси
Власник тварини	Бюджет та час	Знайти оптимального партнера для в'язки, покращити породу.
Розробник	Терміни реалізації та
бюджет	Розробка масштабованої системи, що відповідає встановленим критеріям якості.
Власник продукту		Ринкова конкуренція	Своєчасне отримання готового продукту з документацією, розширення клієнтської бази.
Час і бюджет - головні обмеження розробника, таким чином потрібно відокремити пріоритетні показники для того, щоб акцентувати свою увагу на них в процесі розробки і бути більш стійким до стресових ситуацій, пов'язаних з нестачею ресурсів.

2.5	Середа оточення

Веб-сервер буде створено за допомогою технології Django. Веб-клієнт буде створено за допомогою технології React. Для створення серверу буде використано Django REST Framework [1-2]. Та для створення веб-клієнту буде використано JavaScript та React [3].
Для розміщення серверної частини нашої програмної системи пошуку партнера для в'язки та її веб-інтерфейсу ми будемо використовувати хмарну платформу Microsoft Azure. Azure пропонує широкий спектр сервісів, які ідеально підходять для нашого проекту.
Зокрема, ми плануємо використовувати Azure App Service для розгортання та хостингу нашого веб-додатку. Azure App Service - це повністю керована платформа для створення та масштабування веб-додатків. Вона підтримує різні мови програмування та фреймворки, що дозволить нам гнучко розробляти та впроваджувати нові функції.
На відміну від традиційних монолітних серверів, Azure App Service має модульну архітектуру. Це означає, що ми можемо легко додавати та налаштовувати різні компоненти та сервіси відповідно до потреб нашої системи.
Мобільний клієнт буде реалізований для операційної системи Android за допомогою Android Studio [4].
Розумний пристрій буде реалізовано на основі Arduino плати Arduino Uno та GPS-модуля GY-NEO6MV2.
Система зберігатиме дані у базі даних, використовуючи SQLite [5-6] як систему управління базами даних. SQLite інтегрована в Django за замовчуванням, що робить її ідеальним вибором для розробки та тестування нашої програмної системи.

3 АРХІТЕКТУРА ПРОЕКТУ

Архітектура клієнт-сервер є одним із архітектурних шаблонів програмного забезпечення та є домінуючою концепцією у створенні розподілених мережних застосунків і передбачає взаємодію та обмін даними між ними. Вона передбачає такі основні компоненти:
а) набір серверів, які надають інформацію або інші послуги програмам, які звертаються до них;
б) набір клієнтів, які використовують сервіси, що надаються серверами; в) мережа, яка забезпечує взаємодію між клієнтами та серверами.
На рисунку 3.1 зображена діаграма розгортання проекту, що відображає архітектуру проекту:
Рисунок 3.1 – Діаграма розгортання проекту
Усі компоненти нашої програмної системи для пошуку партнера для в'язки реалізовано за допомогою мови програмування Python та фреймворку Django. Це дозволило нам ефективно використовувати код між різними компонентами, забезпечуючи кращу інтеграцію та мінімізуючи потенційні помилки. Для зберігання спільного коду та моделей даних ми створили окремий Django-додаток, який імпортується в інші модулі системи.
У нашій системі сервер використовується для централізованого зберігання та обробки даних. Він складається з SQLite бази даних та Django REST framework для створення API. База даних містить інформацію про користувачів, їхніх тварин, критерії пошуку партнерів та історію в'язок. Django REST framework надає зручний інтерфейс для взаємодії з цими даними через HTTP-протокол, що дозволяє легко інтегрувати різні клієнтські додатки.
Веб-інтерфейс системи служить для реєстрації нових користувачів, редагування профілів тварин, пошуку партнерів та адміністрування системи. Його реалізовано за допомогою фронтенд-фреймворку React. Усі дані для відображення веб-інтерфейс отримує через API, реалізоване на сервері.
IoT-пристрій у нашій системі представляє собою компактний датчик GPS, який відіграє ключову роль у відстеженні місцезнаходження тварини. Його логіку реалізовано за допомогою мови програмування C++ та платформи Arduino, що забезпечує ефективне управління енергоспоживанням та стабільну передачу даних. Цей пристрій є невід'ємною частиною нашої системи пошуку партнера для в'язки, надаючи важливу інформацію про розташування тварин. Датчик оснащено модулем GPS для визначення координат та модулем бездротового зв'язку для передачі даних на сервер. Він може працювати автономно протягом тривалого часу завдяки оптимізованому енергоспоживанню.
Мобільний додаток реалізовано за допомогою Android Studio. Він вміє знаходити та спілкуватися з розумними пристроями. Також він обмінюється даними з сервером для синхронізації налаштувань користувача та його логіну.
Мобільний клієнт не залежить від наявності серверу та може працювати автономно.
У нашій архітектурі веб-інтерфейс та мобільний додаток є клієнтами для центрального сервера. Сервер обробляє запити від різних клієнтів одночасно, забезпечуючи узгодженість даних та бізнес-логіки. Клієнти мають інформацію про доступний сервер, але не взаємодіють безпосередньо один з одним.
Така архітектура забезпечує гнучкість та масштабованість нашої системи. Вона дозволяє легко додавати нові функції та розширювати можливості як на серверній, так і на клієнтській частині, зберігаючи при цьому цілісність та ефективність всієї системи пошуку партнера для в'язки. Використання нативного Android-додатку забезпечує оптимальну продуктивність та користувацький досвід на мобільних пристроях.

4 КОДУВАННЯ
4.1	Back-end сервер

Доступ      до      даних      було      реалізовано      за       допомогою REST API (див. додаток А), яке доступне для зареєстрованих користувачів. Механізм авторизації було виконано за допомогою JWT (JSON Web Token).
Усі клієнтські додатки (мобільний, веб) буду мати доступ до даних на стороні сервера за допомогою REST Api.
Нижче наведена діаграма використання серверу:
Рисунок 4.1 – Діаграма використання серверу
Роль IoT-пристрою в нашій системі виконує GPS-датчик, який відстежує місцезнаходження тварини. Цей пристрій є ключовим компонентом для надання актуальної інформації про розташування потенційних партнерів для в'язки.
У нашому проекті використовується багаторівнева архітектура. Ми застосовуємо класичну трирівневу систему, що складається з наступних рівнів:
а) API layer (рівень взаємодії з веб-сервером): це рівень, з яким взаємодіють клієнти (веб-інтерфейс та мобільний додаток), надсилаючи запити на веб-сервер. Цей рівень обробляє всі вхідні запити та відповідає за маршрутизацію їх до відповідних компонентів системи;
б) Data Access layer (рівень доступу до даних): зберігає моделі, що описують використовувані суті, також тут розміщуються специфічні класи для роботи з різними технологіями доступу до даних. Тут також зберігаються репозиторії, через які рівень бізнес-логіки взаємодіє з базою даних;
в) Data Access layer (рівень доступу до даних): зберігає моделі, що описують використовувані сутності (тварини, власники, критерії пошуку тощо). Тут також розміщуються специфічні класи для роботи з SQLite базою даних. У цьому рівні зберігаються репозиторії, через які рівень бізнес-логіки взаємодіє з базою даних.
Для реалізації цієї частини проекту було обрано технологію ASP.NET Core Web Api, бо це сучасний метод для створення REST API. Вона дозволяє з мінімальними зусиллями зробити повнофункціоналий сервер. Також вона легко масштабується, що дозволить швидко реагувати на зміну кількості користувачів.
Для реалізації серверної частини проекту було обрано фреймворк Django та Django REST framework, оскільки вони надають потужні інструменти для створення REST API. Django дозволяє з мінімальними зусиллями створити повнофункціональний сервер, який легко масштабується, що дозволить швидко реагувати на зміну кількості користувачів.

4.2	База даних

У нашій програмній системі для пошуку партнера для в'язки використовується база даних SQLite. Вибір SQLite обумовлений її легкістю, відсутністю необхідності окремого сервера бази даних та відмінною інтеграцією з фреймворком Django. Для взаємодії з базою даних використовується ORM (Object-Relational Mapping) Django, що забезпечує зручний та ефективний спосіб роботи з даними без необхідності написання складних SQL-запитів.
Для забезпечення цілісності даних та оптимізації запитів, у базі даних використовуються індекси на ключових полях, таких як ідентифікатори користувачів та тварин, а також на полях, що часто використовуються для пошуку (наприклад, вид та порода тварини).
Безпека даних забезпечується через вбудовані механізми Django, включаючи хешування паролів користувачів та захист від SQL-ін'єкцій. Додатково, всі чутливі дані, такі як особиста інформація користувачів та медичні записи тварин, шифруються перед збереженням у базі даних.
Для оптимізації продуктивності, особливо при роботі з великими обсягами даних, використовуються кешування запитів та пагінація результатів пошуку. Це дозволяє зменшити навантаження на базу даних та прискорити відгук системи на запити користувачів
Регулярне резервне копіювання бази даних забезпечує збереження інформації та можливість швидкого відновлення у разі непередбачених ситуацій. Система також підтримує логування всіх важливих операцій з базою даних для аудиту та відстеження потенційних проблем. 
ЕR діаграму бази даних наведено на рисунку 4.2:
Рисунок 4.2 - ER діаграма бази даних
Django ORM (Object-Relational Mapping) є потужним інструментом для роботи з базами даних у проєктах на основі Django. Ця технологія надає зручний інтерфейс для взаємодії з базою даних SQLite, дозволяючи виконувати запити, встановлювати з'єднання та обробляти результати. У нашій системі для пошуку партнера для в'язки ми вирішили використовувати Django ORM для більшості операцій, але в деяких випадках ми також застосовуємо прямі SQL-запити через Django's database API. Це дає нам більший контроль над структурою бази даних та оптимізацією запитів, особливо для складних операцій пошуку партнерів.
Вище наведена база даних знаходиться в третій нормальній формі.  

4.3	Веб-клієнт

Для розробки клієнтської частини проекту було обрано сучасну бібліотеку React. Ця технологія дозволяє ефективно створювати інтерактивні користувацькі інтерфейси завдяки компонентному підходу та віртуальному DOM, що забезпечує швидку роботу додатку.
React у поєднанні з JavaScript надає можливість розробляти гнучкі та масштабовані веб-додатки. Використання JSX дозволяє легко створювати та керувати компонентами, що представляють різні елементи інтерфейсу системи пошуку партнерів для в'язки.
Взаємодія з серверною частиною реалізована за допомогою REST API. Для виконання HTTP-запитів використовується бібліотека Axios, яка надає зручний інтерфейс для роботи з асинхронними операціями. Всі запити до API виконуються тільки для авторизованих користувачів, а різні ендпоінти мають різні рівні доступу.
Головна сторінка зображена на рис 4.3:
Рисунок 4.3 – Головна сторінка
Діаграму використання системи наведено на рис. 4.4:
Рис 4.4 - Діаграма використання веб-клієнту
В ідеальній ситуації кожен компонент нічого не знає про інші компоненти і взаємодіє з іншими областями програми лише за допомогою абстрактних інтерфейсів. Така взаємозалежність називається слабким зв'язком, і вона спрощує тестування і модифікацію додатків.
Також ми використовуємо механізм впровадження залежностей для більш гнучкої поведінки.

4.4	Мобільний клієнт

Для розробки мобільного додатку було обрано сучасну платформу Android Studio з використанням мови програмування Kotlin. Ця комбінація забезпечує ефективне та гнучке середовище для створення високопродуктивних Android-додатків.
Взаємодія з серверною частиною реалізована через REST API. Для виконання мережевих запитів використовується бібліотека Retrofit, яка забезпечує типобезпечний HTTP-клієнт для Android. Усі запити до API виконуються лише для авторизованих користувачів, при цьому різні ендпоінти мають різні рівні доступу для забезпечення безпеки даних.
Сторінка з тваринами зображена на рис 4.5:
Рисунок 4.5 – Сторінка з домашніми тваринами
Додаток можна запустити на будь-якому мобільному пристрої із системою Android 4.4+ та доступом до мережі Інтернет. Також, для використання мобільного додатку, обов’язково бути зареєстрованим користувачем.
Діаграму використання додатку наведено на рис. 4.6:
Рисунок 4.6 - Діаграма використання мобільного клієнту

4.5	Розумний пристрій

Для демонстрації можливостей системи був створений смарт-пристрій, що надає можливість отримати інформацію щодо місцезнаходження тварини під час пошуку партнера для в'язки.
Для розробки програмного забезпечення для IoT пристрою використовується мова програмування Arduino (.ino). Пристрій складається з плати Arduino Uno та GPS-модуля GY-NEO6MV2. 

ВИСНОВКИ

В результаті виконання даної курсової роботи була розроблена інноваційна система для пошуку партнера для в'язки тварин, яка автоматизує процес підбору без безпосереднього втручання людини. Система складається з серверної частини, веб-інтерфейсу, мобільного додатку та IoT-пристрою для відстеження місцезнаходження тварин.
Серверна частина була реалізована за допомогою фреймворку Django, що забезпечило надійну та масштабовану backend-архітектуру. Для розгортання серверу було використано платформу Azure, що дозволило легко масштабувати систему за потреби.
У ході розробки був проведений ґрунтовний аналіз предметної області, на основі якого були сформульовані та реалізовані бізнес-вимоги. Створена архітектура системи є гнучкою та легко розширюваною, що дозволяє легко додавати нові функції та масштабувати систему в майбутньому.
У процесі реалізації проекту були поглиблені знання з розробки сучасних веб-додатків, проектування архітектури розподілених систем та інтеграції IoT-пристроїв.
Всі вимоги, сформульовані в постановці завдання, були успішно реалізовані. Створена система пошуку партнера для в'язки є інноваційним рішенням, яке автоматизує та оптимізує процес підбору партнерів для тварин, забезпечуючи зручність для власників та підвищуючи ефективність селекційної роботи. 

ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ

1.	Django documentation [Електронний ресурс] / Django Software Foundation. – Режим доступу: https://docs.djangoproject.com/ – 27.06.2024.
2.	Django REST framework [Електронний ресурс] / Django REST framework. – Режим доступу: https://www.django-rest-framework.org/ – 27.06.2024.
3.	React – A JavaScript library for building user interfaces [Електронний ресурс] / Facebook Inc. – Режим доступу: https://reactjs.org/ – 27.06.2024.
4. Android Developers [Електронний ресурс] / Google LLC. – Режим доступу: https://developer.android.com/ – 27.06.2024.
5. SQLite Documentation [Електронний ресурс] / SQLite. – Режим доступу: https://www.sqlite.org/docs.html – 27.06.2024.
6. Басс Л. Архітектура програмного забезпечення на практиці / Л. Басс, П. Клементс, Р. Кацман. – 3-тє вид. – К.: Видавничий дім "Вільямс", 2006. – 576 с.

ДОДАТОК А
Програмний код